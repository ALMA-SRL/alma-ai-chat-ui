name: Build and Deploy ALMA AI (cPanel)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  CPANEL_HOST: 'ftp.alma.com.do'
  CPANEL_USER: 'librechat@chat.alma.com.do'
  DEPLOY_PATH: 'chat'
  VENV_PATH: '/home/itxl0055/nodevenv/public_html/alma.com.do/chat/22'
  SITE_URL: 'https://chat.alma.com.do'
  VITE_APP_TITLE: 'Alma AI'
  VITE_CUSTOM_FOOTER: 'Powered by ALMA AI'
  VITE_BRAND_NAME: 'Alma'
  VITE_BRAND_LOGO_URL: 'https://chat.alma.com.do/logo.png'
  VITE_BRAND_PRIMARY_COLOR: '#0057B8'
  VITE_BRAND_SECONDARY_COLOR: '#FFD700'
  DOMAIN_CLIENT: 'https://chat.alma.com.do'
  DOMAIN_SERVER: 'https://chat.alma.com.do'
  SMTP_HOST: 'mail.alma.com.do'
  SMTP_PORT: '465'
  SMTP_SECURE: 'true'
  SMTP_USER: 'info@alma.com.do'
  SMTP_FROM: 'info@alma.com.do'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund
      
    - name: Create build environment file
      run: |
        # Create a temporary .env for the build process
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        
        # Add build-specific environment variables
        echo "VITE_APP_TITLE=Alma AI" >> .env
        echo "VITE_CUSTOM_FOOTER=Powered by ALMA AI" >> .env
        echo "DOMAIN_CLIENT=${{ env.SITE_URL }}" >> .env
        echo "DOMAIN_SERVER=${{ env.SITE_URL }}" >> .env
        echo "MONGO_URI=${{ env.MONGO_URI }}" >> .env
        
    - name: Cache build outputs
      uses: actions/cache@v4
      id: cache-build
      with:
        path: |
          client/dist
          dist
          build
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('client/**', 'src/**', 'public/**') }}
        restore-keys: |
          ${{ runner.os }}-build-
          
    - name: Build frontend
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        # Set NODE_OPTIONS for better performance
        export NODE_OPTIONS="--max-old-space-size=4096"
        npm run frontend
      
    - name: Create deployment package
      run: |
        # Create deployment directory structure
        mkdir -p deploy-package
        
        # Copy built client files (use rsync for better performance)
        if [ -d "client/dist" ]; then
          rsync -av --exclude='*.map' client/dist/ deploy-package/
        elif [ -d "dist" ]; then
          rsync -av --exclude='*.map' dist/ deploy-package/
        elif [ -d "build" ]; then
          rsync -av --exclude='*.map' build/ deploy-package/
        fi
        
        # Copy server files and configurations efficiently
        [ -d "api" ] && rsync -av --exclude='node_modules' --exclude='*.log' api/ deploy-package/api/
        cp package*.json deploy-package/ 2>/dev/null || true
        cp .env.example deploy-package/ 2>/dev/null || true
        
        # Copy additional necessary files
        [ -d "config" ] && rsync -av config/ deploy-package/config/
        [ -d "client/public" ] && rsync -av client/public/ deploy-package/public/
        
        # Create Node.js app startup file for cPanel
        cat > deploy-package/app.js << 'EOF'
        const express = require('express');
        const path = require('path');
        const { createProxyMiddleware } = require('http-proxy-middleware');
        
        const app = express();
        const PORT = process.env.PORT || 3000;
        
        // Serve static files
        app.use(express.static(path.join(__dirname, '/')));
        
        // API proxy (if backend is separate)
        if (process.env.BACKEND_URL) {
          app.use('/api', createProxyMiddleware({
            target: process.env.BACKEND_URL,
            changeOrigin: true,
            pathRewrite: {
              '^/api': '/api'
            }
          }));
        }
        
        // Handle React routing
        app.get('*', (req, res) => {
          res.sendFile(path.join(__dirname, 'index.html'));
        });
        
        app.listen(PORT, () => {
          console.log(`LibreChat frontend server running on port ${PORT}`);
        });
        EOF
        
        # Create package.json for Node.js app
        cat > deploy-package/package.json << 'EOF'
        {
          "name": "librechat-frontend",
          "version": "1.0.0",
          "description": "LibreChat Frontend Application",
          "main": "app.js",
          "scripts": {
            "start": "node app.js",
            "backend": "node api/server.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "http-proxy-middleware": "^2.0.6"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        }
        EOF
        
        # Create .htaccess for Apache
        cat > deploy-package/.htaccess << 'EOF'
        RewriteEngine On
        RewriteBase /
        
        # Handle React/Vue routing
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_URI} !^/api/
        RewriteRule ^(.*)$ /index.html [QSA,L]
        
        # Set proper MIME types
        AddType text/javascript .js
        AddType text/css .css
        AddType application/json .json
        AddType application/wasm .wasm
        
        # Security headers
        <IfModule mod_headers.c>
            Header always set X-Content-Type-Options nosniff
            Header always set X-Frame-Options SAMEORIGIN
            Header always set X-XSS-Protection "1; mode=block"
            Header always set Referrer-Policy "strict-origin-when-cross-origin"
            Header always set Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https:; img-src 'self' data: https:; font-src 'self' data: https:;"
        </IfModule>
        
        # Enable compression
        <IfModule mod_deflate.c>
            AddOutputFilterByType DEFLATE text/plain text/html text/xml text/css
            AddOutputFilterByType DEFLATE application/xml application/xhtml+xml application/rss+xml
            AddOutputFilterByType DEFLATE application/javascript application/x-javascript application/json
        </IfModule>
        
        # Cache static assets
        <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType text/javascript "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
            ExpiresByType image/webp "access plus 1 year"
            ExpiresByType image/x-icon "access plus 1 year"
            ExpiresByType font/woff "access plus 1 year"
            ExpiresByType font/woff2 "access plus 1 year"
            ExpiresByType application/wasm "access plus 1 year"
        </IfModule>
        
        # Disable directory browsing
        Options -Indexes
        
        # Protect sensitive files
        <Files ~ "^\.env">
            Order allow,deny
            Deny from all
        </Files>
        
        <Files ~ "^\..*">
            Order allow,deny
            Deny from all
        </Files>
        
        # Handle Node.js app
        <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteRule ^(.*)$ /app.js [QSA,L]
        </IfModule>
        EOF
        
        # Create startup script for cPanel
        cat > deploy-package/startup.sh << 'EOF'
        #!/bin/bash
        
        # Navigate to app directory
        cd chat
        
        # Activate Node.js virtual environment
        source /home/itxl0055/nodevenv/public_html/alma.com.do/chat/22/bin/activate
        
        # Install dependencies if not present
        if [ ! -d "node_modules" ]; then
            npm install
        fi
        
        # Start the application
        npm start
        EOF
        
        chmod +x deploy-package/startup.sh
        
        # Create cPanel configuration instructions
        cat > deploy-package/CPANEL_SETUP.md << 'EOF'
        # cPanel Setup Instructions for LibreChat
        
        ## Step 1: Create Node.js App in cPanel
        1. Login to cPanel
        2. Go to "Node.js App" or "Node.js Selector"
        3. Click "Create Application"
        4. Set Node.js version to 22
        5. Set Application root: `public_html/alma.com.do/chat`
        6. Set Application URL: `chat.alma.com.do`
        7. Set Application startup file: `app.js`
        8. Click "Create"
        
        ## Step 2: Configure Environment Variables
        1. In the Node.js App interface, click "Environment Variables"
        2. Add these variables:
           - `DOMAIN_CLIENT`: https://chat.alma.com.do
           - `DOMAIN_SERVER`: https://chat.alma.com.do
           - `MONGO_URI`: your-mongodb-connection-string
           - `JWT_SECRET`: your-jwt-secret-key
           - `JWT_REFRESH_SECRET`: your-jwt-refresh-secret
           - `CREDS_KEY`: your-32-byte-encryption-key
           - `CREDS_IV`: your-16-byte-iv
           - `OPENAI_API_KEY`: your-openai-api-key (optional)
           - `ANTHROPIC_API_KEY`: your-anthropic-api-key (optional)
        
        ## Step 3: Install Dependencies
        1. In cPanel, go to "Terminal" or use SSH
        2. Navigate to your app directory:
           ```bash
           cd public_html/alma.com.do/chat
           source nodevenv/public_html/alma.com.do/chat/22/bin/activate
           npm install
           ```
        
        ## Step 4: Start/Restart Application
        1. Go back to "Node.js App" in cPanel
        2. Click "Restart" next to your application
        3. Check the status - it should show "Running"
        
        ## Step 5: Configure Database
        1. Set up MongoDB (local or Atlas)
        2. Update MONGO_URI in environment variables
        3. Restart the application
        
        ## Troubleshooting
        - Check logs in cPanel Node.js App interface
        - Verify Node.js version is 22
        - Ensure all environment variables are set
        - Check file permissions (755 for directories, 644 for files)
        - Verify MongoDB connection
        EOF
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: librechat-build
        path: deploy-package/
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: librechat-build
        path: deploy-package/
        
    - name: Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ env.CPANEL_HOST }}
        username: ${{ env.CPANEL_USER }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: 21
        protocol: ftp
        local-dir: ./deploy-package/
        server-dir: chat/
        state-name: .ftp-deploy-sync-state.json
        dry-run: false
        log-level: minimal
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.env.local
          **/.env.development
          **/.env.test
          **/.env.production.local
          **/npm-debug.log*
          **/yarn-debug.log*
          **/yarn-error.log*
          **/.DS_Store
          **/Thumbs.db
          **/startup.sh
          **/CPANEL_SETUP.md
          **/*.map
          
    - name: Restart Node.js App via cPanel API
      if: vars.CPANEL_API_TOKEN != ''
      run: |
        # Restart Node.js application via cPanel API
        echo "Restarting Node.js application..."
        curl -H "Authorization: cpanel ${{ env.CPANEL_USER }}:${{ vars.CPANEL_API_TOKEN }}" \
          -X POST \
          "https://${{ env.CPANEL_HOST }}:2083/execute/NodeJS/restart_app" \
          -d "domain=chat.alma.com.do" || echo "API restart failed"
        
        # Wait for restart
        sleep 10
        
    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
        # Check if site is responding
        if curl -f -s -I ${{ env.SITE_URL }} | grep -q "200\|301\|302"; then
          echo "✅ Health check passed - Site is responding"
        else
          echo "⚠️  Health check failed - Site may need time to start"
        fi
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "📋 Deployment Summary:"
        echo "🌐 Site URL: ${{ env.SITE_URL }}"
        echo "📁 Deploy Path: ${{ env.DEPLOY_PATH }}"
        echo "⚙️  Node.js Version: ${{ env.NODE_VERSION }}"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo ""
          echo "🔧 Next Steps:"
          echo "1. Login to cPanel at https://${{ env.CPANEL_HOST }}:2083"
          echo "2. Go to 'Node.js App' section"
          echo "3. Configure environment variables (see CPANEL_SETUP.md)"
          echo "4. Install dependencies: npm install"
          echo "5. Start/restart the application"
          echo "6. Check application logs for any errors"
          echo ""
          echo "📚 Setup Guide: Check CPANEL_SETUP.md in your deployment directory"
        else
          echo "❌ Deployment failed!"
          echo ""
          echo "🔍 Troubleshooting:"
          echo "1. Check FTP credentials"
          echo "2. Verify cPanel API token (optional)"
          echo "3. Ensure Node.js app is created in cPanel"
          echo "4. Check file permissions on server"
        fi